// Generated by gencpp from file ego_planner/Bspline.msg
// DO NOT EDIT!


#ifndef EGO_PLANNER_MESSAGE_BSPLINE_H
#define EGO_PLANNER_MESSAGE_BSPLINE_H


#include <string>
#include <vector>
#include <map>

// #include <ros/types.h>
// #include <ros/serialization.h>
// #include <ros/builtin_message_traits.h>
// #include <ros/message_operations.h>

#include <geometry_msgs/Point.h>

namespace ego_planner
{
template <class ContainerAllocator>
struct Bspline_
{
  typedef Bspline_<ContainerAllocator> Type;

  Bspline_()
    : order(0)
    , traj_id(0)
    , knots()
    , pos_pts()
    , yaw_pts()
    , yaw_dt(0.0)  {
    }
  Bspline_(const ContainerAllocator& _alloc)
    : order(0)
    , traj_id(0)
    , knots(_alloc)
    , pos_pts(_alloc)
    , yaw_pts(_alloc)
    , yaw_dt(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _order_type;
  _order_type order;

   typedef int64_t _traj_id_type;
  _traj_id_type traj_id;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _knots_type;
  _knots_type knots;

   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::Point_<ContainerAllocator> >::other >  _pos_pts_type;
  _pos_pts_type pos_pts;

   typedef std::vector<double, typename ContainerAllocator::template rebind<double>::other >  _yaw_pts_type;
  _yaw_pts_type yaw_pts;

   typedef double _yaw_dt_type;
  _yaw_dt_type yaw_dt;





  typedef boost::shared_ptr< ::ego_planner::Bspline_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ego_planner::Bspline_<ContainerAllocator> const> ConstPtr;

}; // struct Bspline_

typedef ::ego_planner::Bspline_<std::allocator<void> > Bspline;

typedef boost::shared_ptr< ::ego_planner::Bspline > BsplinePtr;
typedef boost::shared_ptr< ::ego_planner::Bspline const> BsplineConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ego_planner::Bspline_<ContainerAllocator> & v)
{
// ros::message_operations::Printer< ::ego_planner::Bspline_<ContainerAllocator> >::stream(s, "", v);
// return s;
}

} // namespace ego_planner

#endif // EGO_PLANNER_MESSAGE_BSPLINE_H
